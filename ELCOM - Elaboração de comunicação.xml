<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="Elaboração de comunicação">
    <description><![CDATA[Código: ELCOM]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - Elaboração de comunicação"/>
    <swimlane name="solicitante">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('10:1338,9:1469,9:5197,10:5483,9:5945')}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="solicitante" priority="3"/>
        <transition to="Comunicação - Elaborar" name="Comunicação - Elaborar"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:evento:sinalizacao:processos')}"/>
        </event>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="Comunicação - Elaborar">
        <task name="Comunicação - Elaborar" swimlane="solicitante" priority="3">
            <controller>
                <variable name="pac" mapped-name="pac:pac" access="read,write"/>
                <variable name="movimentarEmLote" mapped-name="movimentarLote:movimentarEmLote" access="read"/>
                <variable name="intimarEmLote" mapped-name="intimarLote:intimarEmLote" access="read"/>
            </controller>
        </task>
        <transition to="Incluir no fluxo de análise da secretaria" name="Encaminhar para análise da secretaria"/>
        <transition to="Intimação em lote?" name="Intimação em lote?">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - Elaboração de comunicação" name="Nó de Desvio - Elaboração de comunicação">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action name="upd" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action name="upd" expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao(centralMandadoManager.obterPorLocalizacoes(localizacaoManager.getArvoreAscendente(tramitacaoProcessualService.recuperaProcesso().getOrgaoJulgador().getLocalizacao().getIdLocalizacao(), true)).size() &gt; 0 ? 'E,C,M,T,S,G' : 'E,C,T,S,G')}"/>
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('Intimação em lote?')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos', 'Intimação em lote?, Encaminhar para análise da secretaria')}"/>
        </event>
        <event type="task-assign">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', not empty tramitacaoProcessualService.recuperaVariavel('jef:idsDocumentosPossiveis') ? tramitacaoProcessualService.recuperaVariavel('jef:idsDocumentosPossiveis') : parametroUtil.getParametro('pje:fluxo:idsDocumentosPAC'))}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('pje:evento:sinalizacao:processos') == 'pje:fluxo:intimacaoLote' ? (tramitacaoProcessualService.recuperaVariavel('pje:fluxo:lote:pendenciaIntimacao') == false ? 'Encaminhar via sistema em lote' : 'Selecionar partes') : 'Incluir no fluxo de análise da comunicação'}" name="Intimação em lote?">
        <transition to="Comunicação - Selecionar partes" name="Selecionar partes"/>
        <transition to="Encaminhar via sistema em lote" name="Encaminhar via sistema em lote"/>
        <transition to="Incluir no fluxo de análise da comunicação" name="Incluir no fluxo de análise da comunicação"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:evento:sinalizacao:processos')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:lote:pendenciaIntimacao')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:ultimoDocumentoJuntado',processoExpedienteManager.getUltimoExpedienteCriado(tramitacaoProcessualService.recuperaProcesso()).processoDocumento.idProcessoDocumento)}"/>
        </event>
    </decision>
    <node name="Encaminhar via sistema em lote">
        <transition to="Incluir no fluxo de controle de prazo" name="Incluir no fluxo de controle de prazo"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(60).associarAoDocumento(processoExpedienteManager.getUltimoExpedienteCriado(tramitacaoProcessualService.recuperaProcesso()).processoDocumento).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(80).lancarMovimento()}"/>
        </event>
    </node>
    <decision expression="#{miniPacAction.getMiniPacVOList().isEmpty() or miniPacAction.getMiniPacVOList().{destinatario | destinatario.getAtivo() and destinatario.getMeios().size() == 0}.contains(true) ? 'Selecionar partes' : 'Incluir no fluxo de análise da comunicação'}" name="Partes selecionadas?">
        <transition to="Incluir no fluxo de análise da comunicação" name="Incluir no fluxo de análise da comunicação"/>
        <transition to="Comunicação - Selecionar partes" name="Selecionar partes"/>
    </decision>
    <task-node end-tasks="true" name="Comunicação - Selecionar partes">
        <task name="Comunicação - Selecionar partes" swimlane="solicitante" priority="3">
            <controller>
                <variable name="atencao" mapped-name="textMessage:atencao" access="read,write"/>
                <variable name="miniPac" mapped-name="miniPAC:miniPac" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[Variável: atencao
Label: Selecione ao menos uma parte para enviar a comunicação.
Tipo: Aviso Customizado]]></description>
        <transition to="Incluir no fluxo de análise da secretaria" name="Encaminhar para análise da secretaria"/>
        <transition to="Incluir no fluxo de análise da comunicação" name="Lançar movimento de expedição">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - Elaboração de comunicação" name="Nó de Desvio - Elaboração de comunicação">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('prepararAto:meiosComunicacoes',centralMandadoManager.obterPorLocalizacoes(localizacaoManager.getArvoreAscendente(tramitacaoProcessualService.recuperaProcesso().getOrgaoJulgador().getLocalizacao().getIdLocalizacao(), true)).size() &gt; 0 ? 'E,C,M,T,S,G' : 'E,C,T,S,G')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:miniPac:prazoGeral', '15')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:miniPac:DocJaExiste', true)}"/>
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('Lançar movimento de expedição')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos', 'Lançar movimento de expedição, Encaminhar para análise da secretaria')}"/>
        </event>
    </task-node>
    <node name="Incluir no fluxo de análise da comunicação">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('minutaEmElaboracao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('condicaoLancamentoMovimentosTemporario')}"/>
            <action expression="#{processoJudicialService.incluirNovoFluxo(tramitacaoProcessualService.recuperaProcesso(), 'ANCOM', processInstanceUtil.getVariables())}"/>
        </event>
    </node>
    <node name="Incluir no fluxo de controle de prazo">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('minutaEmElaboracao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('condicaoLancamentoMovimentosTemporario')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('comunicacaoProcessualAction:idsExpedientes')}"/>
            <action expression="#{processoJudicialService.incluirNovoFluxo(tramitacaoProcessualService.recuperaProcesso(), 'CONTRPRAZ', processInstanceUtil.getVariables())}"/>
        </event>
    </node>
    <node name="Incluir no fluxo de análise da secretaria">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{processoDocumentoManager.removerDocumentoAPartirDeVariavalDeFluxo('minutaEmElaboracao')}"/>
            <action expression="#{miniPacService.apagarVariaveisMiniPacContexto()}"/>
            <action expression="#{lancadorMovimentosService.apagarMovimentosTemporarios()}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('minutaEmElaboracao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('condicaoLancamentoMovimentosTemporario')}"/>
            <action expression="#{processoJudicialService.incluirNovoFluxo(tramitacaoProcessualService.recuperaProcesso(), 'ANSEC', processInstanceUtil.getVariables())}"/>
        </event>
    </node>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Comunicação - Minutar">
        <task name="Comunicação - Minutar" swimlane="solicitante" priority="3">
            <controller>
                <variable name="comunicacao" mapped-name="textEditAndAttachmentSignature:comunicacao" access="read,write"/>
                <variable name="miniPac" mapped-name="miniPAC:miniPac" access="read,write"/>
                <variable name="movimentarEmLote" mapped-name="movimentarLote:movimentarEmLote" access="read"/>
                <variable name="intimarEmLote" mapped-name="intimarLote:intimarEmLote" access="read"/>
            </controller>
        </task>
        <transition to="Comunicação - Assinar" name="Assinar"/>
        <transition to="Incluir no fluxo de análise da secretaria" name="Encaminhar para análise da secretaria"/>
        <transition to="Intimação em lote antigo?" name="Intimação em lote?">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - Elaboração de comunicação" name="Nó de Desvio - Elaboração de comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Comunicação - Revisar" name="Revisar"/>
        <event type="task-create">
            <action name="upd" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('prepararAto:meiosComunicacoes',centralMandadoManager.obterPorLocalizacoes(localizacaoManager.getArvoreAscendente(tramitacaoProcessualService.recuperaProcesso().getOrgaoJulgador().getLocalizacao().getIdLocalizacao(), true)).size() &gt; 0 ? 'E,M,T,S,G' : 'E,T,S,G')}"/>
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('Intimação em lote?')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos', 'Intimação em lote?, Encaminhar para análise da secretaria')}"/>
        </event>
        <event type="task-assign">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', not empty tramitacaoProcessualService.recuperaVariavel('jef:idsDocumentosPossiveis') ? tramitacaoProcessualService.recuperaVariavel('jef:idsDocumentosPossiveis') : parametroUtil.getParametro('pje:fluxo:idsDocumentosPAC'))}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="Comunicação - Revisar">
        <task name="Comunicação - Revisar" swimlane="solicitante" priority="3">
            <controller>
                <variable name="comunicacao" mapped-name="textEditAndAttachmentSignature:comunicacao" access="read,write"/>
                <variable name="miniPac" mapped-name="miniPAC:miniPac" access="read,write"/>
                <variable name="movimentarEmLote" mapped-name="movimentarLote:movimentarEmLote" access="read"/>
            </controller>
        </task>
        <transition to="Comunicação - Assinar" name="Assinar"/>
        <transition to="Comunicação - Corrigir" name="Corrigir"/>
        <transition to="Incluir no fluxo de análise da secretaria" name="Encaminhar para análise da secretaria"/>
        <transition to="Intimação em lote antigo?" name="Intimação em lote?">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - Elaboração de comunicação" name="Nó de Desvio - Elaboração de comunicação">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action name="upd" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('prepararAto:meiosComunicacoes',centralMandadoManager.obterPorLocalizacoes(localizacaoManager.getArvoreAscendente(tramitacaoProcessualService.recuperaProcesso().getOrgaoJulgador().getLocalizacao().getIdLocalizacao(), true)).size() &gt; 0 ? 'E,M,T,S,G' : 'E,T,S,G')}"/>
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('Intimação em lote?')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos', 'Intimação em lote?, Encaminhar para análise da secretaria')}"/>
        </event>
        <event type="task-assign">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', not empty tramitacaoProcessualService.recuperaVariavel('jef:idsDocumentosPossiveis') ? tramitacaoProcessualService.recuperaVariavel('jef:idsDocumentosPossiveis') : parametroUtil.getParametro('pje:fluxo:idsDocumentosPAC'))}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="Comunicação - Corrigir">
        <task name="Comunicação - Corrigir" swimlane="solicitante" priority="3">
            <controller>
                <variable name="comunicacao" mapped-name="textEditAndAttachmentSignature:comunicacao" access="read,write"/>
                <variable name="miniPac" mapped-name="miniPAC:miniPac" access="read,write"/>
                <variable name="movimentarEmLote" mapped-name="movimentarLote:movimentarEmLote" access="read"/>
            </controller>
        </task>
        <transition to="Comunicação - Assinar" name="Assinar"/>
        <transition to="Incluir no fluxo de análise da secretaria" name="Encaminhar para análise da secretaria"/>
        <transition to="Intimação em lote antigo?" name="Intimação em lote?">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - Elaboração de comunicação" name="Nó de Desvio - Elaboração de comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Comunicação - Revisar" name="Revisar"/>
        <event type="task-create">
            <action name="upd" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('prepararAto:meiosComunicacoes',centralMandadoManager.obterPorLocalizacoes(localizacaoManager.getArvoreAscendente(tramitacaoProcessualService.recuperaProcesso().getOrgaoJulgador().getLocalizacao().getIdLocalizacao(), true)).size() &gt; 0 ? 'E,M,T,S,G' : 'E,T,S,G')}"/>
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('Intimação em lote?')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos', 'Intimação em lote?, Encaminhar para análise da secretaria')}"/>
        </event>
        <event type="task-assign">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', not empty tramitacaoProcessualService.recuperaVariavel('jef:idsDocumentosPossiveis') ? tramitacaoProcessualService.recuperaVariavel('jef:idsDocumentosPossiveis') : parametroUtil.getParametro('pje:fluxo:idsDocumentosPAC'))}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="Comunicação - Assinar">
        <task name="Comunicação - Assinar" swimlane="solicitante" priority="4">
            <controller>
                <variable name="comunicacao" mapped-name="textEditAndAttachmentSignature:comunicacao" access="read,write"/>
                <variable name="miniPac" mapped-name="miniPAC:miniPac" access="read,write"/>
                <variable name="movimentarEmLote" mapped-name="movimentarLote:movimentarEmLote" access="read"/>
                <variable name="assinarEmLote" mapped-name="assinarLote:assinarEmLote" access="read"/>
            </controller>
        </task>
        <transition to="Comunicação - Corrigir" name="Corrigir"/>
        <transition to="Incluir no fluxo de análise da secretaria" name="Encaminhar para análise da secretaria"/>
        <transition to="Intimação em lote antigo?" name="Intimação em lote?">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - Elaboração de comunicação" name="Nó de Desvio - Elaboração de comunicação">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action name="upd" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('prepararAto:meiosComunicacoes',centralMandadoManager.obterPorLocalizacoes(localizacaoManager.getArvoreAscendente(tramitacaoProcessualService.recuperaProcesso().getOrgaoJulgador().getLocalizacao().getIdLocalizacao(), true)).size() &gt; 0 ? 'E,M,T,S,G' : 'E,T,S,G')}"/>
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('Intimação em lote?')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos', 'Intimação em lote?, Encaminhar para análise da secretaria')}"/>
        </event>
        <event type="task-assign">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', not empty tramitacaoProcessualService.recuperaVariavel('jef:idsDocumentosPossiveis') ? tramitacaoProcessualService.recuperaVariavel('jef:idsDocumentosPossiveis') : parametroUtil.getParametro('pje:fluxo:idsDocumentosPAC'))}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('pje:evento:sinalizacao:processos') == 'pje:fluxo:intimacaoLote' ? (tramitacaoProcessualService.recuperaVariavel('pje:fluxo:lote:pendenciaIntimacao') == false ? 'Encaminhar via sistema em lote' : 'Selecionar partes') : 'Partes selecionadas?'}" name="Intimação em lote antigo?">
        <transition to="Comunicação - Selecionar partes" name="Selecionar partes"/>
        <transition to="Encaminhar via sistema em lote" name="Encaminhar via sistema em lote"/>
        <transition to="Partes selecionadas?" name="Partes selecionadas?"/>
    </decision>
    <task-node end-tasks="true" name="Nó de Desvio - Elaboração de comunicação">
        <task name="Nó de Desvio - Elaboração de comunicação" swimlane="solicitante" priority="3"/>
        <transition to="Término" name="Término"/>
        <transition to="Comunicação - Minutar" name="Comunicação - Minutar"/>
        <transition to="Comunicação - Assinar" name="Comunicação - Assinar"/>
        <transition to="Comunicação - Corrigir" name="Comunicação - Corrigir"/>
        <transition to="Comunicação - Selecionar partes" name="Comunicação - Selecionar partes"/>
        <transition to="Incluir no fluxo de análise da comunicação" name="Incluir no fluxo de análise da comunicação"/>
        <transition to="Comunicação - Revisar" name="Comunicação - Revisar"/>
        <transition to="Comunicação - Elaborar" name="Comunicação - Elaborar"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
