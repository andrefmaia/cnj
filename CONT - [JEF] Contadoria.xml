<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="[JEF] Contadoria"> 
    <!-- SWIMLANES -->
    <swimlane name="Servidores e estagiários">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('63:5171,63:5942,63:5182,10:1338')}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" priority="3"/>
        <transition to="[JEF] Separação em deslocamento para contadoria" name="[JEF] Separação em deslocamento para contadoria"/>
    </start-state>  
    <!-- NODES -->
    <fork name="[JEF] Separação em deslocamento para contadoria">
        <transition to="[JEF] Processo do Ceará?" name="Processo do Ceará?"/>
        <transition to="[JEF] Processo do Recife?" name="Processo do Recife?"/>
        <transition to="[JEF] Processo de Caruaru?" name="Processo de Caruaru?"/>
        <transition to="[JEF] Processo de Petrolina?" name="Processo de Petrolina?"/>
        <transition to="[JEF] Processo do Rio Grande do Norte?" name="Processo do Rio Grande do Norte?"/>
    </fork>
    <decision expression="#{tramitacaoProcessualService.recuperaProcesso().jurisdicao.estado.estado.equalsIgnoreCase('Ceará') ? 'Deslocar para contadoria do Ceará' : 'Junção no deslocamento para contadoria'}" name="[JEF] Processo do Ceará?">
        <transition to="[JEF] Deslocar para contadoria do Ceará" name="Deslocar para contadoria do Ceará"/>
        <transition to="[JEF] Junção no deslocamento para contadoria" name="Junção no deslocamento para contadoria"/>
    </decision>
    <node name="[JEF] Deslocar para contadoria do Ceará">
        <transition to="[JEF] Junção no deslocamento para contadoria" name="[JEF] Junção no deslocamento para contadoria"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:idOrgaoOrigem', tramitacaoProcessualService.recuperaProcesso().orgaoJulgador.idOrgaoJulgador)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:idOrgaoColegiadoOrigem', tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorColegiado.idOrgaoJulgadorColegiado)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:idOrgaoJulgadorCargoOrigem', tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorCargo.idOrgaoJulgadorCargo)}"/>
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaVariavel('processo'),8,0,0)}"/>
            <action expression="#{preencherMovimento.deCodigo(123).comComplementoDeCodigo(18).doTipoDominio().preencherComElementoDeCodigo(40).comComplementoDeCodigo(7).doTipoLivre().preencherComTexto('Contadoria do Ceará').lancarMovimento()}"/>
        </event>
    </node>
    <decision expression="#{tramitacaoProcessualService.recuperaProcesso().jurisdicao.numeroOrigem == 8300 ? 'Deslocar para contadoria do Recife' : 'Junção no deslocamento para contadoria'}" name="[JEF] Processo do Recife?">
        <transition to="[JEF] Deslocar para contadoria do Recife" name="Deslocar para contadoria do Recife"/>
        <transition to="[JEF] Junção no deslocamento para contadoria" name="Junção no deslocamento para contadoria"/>
    </decision>
    <node name="[JEF] Deslocar para contadoria do Recife">
        <transition to="[JEF] Junção no deslocamento para contadoria" name="[JEF] Junção no deslocamento para contadoria"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:idOrgaoOrigem', tramitacaoProcessualService.recuperaProcesso().orgaoJulgador.idOrgaoJulgador)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:idOrgaoColegiadoOrigem', tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorColegiado.idOrgaoJulgadorColegiado)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:idOrgaoJulgadorCargoOrigem', tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorCargo.idOrgaoJulgadorCargo)}"/>
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaVariavel('processo'),89,0,0)}"/>
            <action expression="#{preencherMovimento.deCodigo(123).comComplementoDeCodigo(18).doTipoDominio().preencherComElementoDeCodigo(40).comComplementoDeCodigo(7).doTipoLivre().preencherComTexto('Contadoria de Recife').lancarMovimento()}"/>
        </event>
    </node>
    <decision expression="#{tramitacaoProcessualService.recuperaProcesso().jurisdicao.numeroOrigem == 8302 ? 'Deslocar para contadoria de Caruaru' : 'Junção no deslocamento para contadoria'}" name="[JEF] Processo de Caruaru?">
        <transition to="[JEF] Junção no deslocamento para contadoria" name="Junção no deslocamento para contadoria"/>
        <transition to="[JEF] Deslocar para contadoria de Caruaru" name="Deslocar para contadoria de Caruaru"/>
    </decision>
    <node name="[JEF] Deslocar para contadoria de Caruaru">
        <transition to="[JEF] Junção no deslocamento para contadoria" name="Junção no deslocamento para contadoria"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:idOrgaoOrigem', tramitacaoProcessualService.recuperaProcesso().orgaoJulgador.idOrgaoJulgador)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:idOrgaoColegiadoOrigem', tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorColegiado.idOrgaoJulgadorColegiado)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:idOrgaoJulgadorCargoOrigem', tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorCargo.idOrgaoJulgadorCargo)}"/>
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaVariavel('processo'),90,0,0)}"/>
            <action expression="#{preencherMovimento.deCodigo(123).comComplementoDeCodigo(18).doTipoDominio().preencherComElementoDeCodigo(40).comComplementoDeCodigo(7).doTipoLivre().preencherComTexto('Contadoria de Recife').lancarMovimento()}"/>
        </event>
    </node>
    <decision expression="#{tramitacaoProcessualService.recuperaProcesso().jurisdicao.numeroOrigem == 8308 ? 'Deslocar para contadoria de Petrolina' : 'Junção no deslocamento para contadoria'}" name="[JEF] Processo de Petrolina?">
        <transition to="[JEF] Junção no deslocamento para contadoria" name="Junção no deslocamento para contadoria"/>
        <transition to="[JEF] Deslocar para contadoria de Petrolina" name="Deslocar para contadoria de Petrolina"/>
    </decision>
    <node name="[JEF] Deslocar para contadoria de Petrolina">
        <transition to="[JEF] Junção no deslocamento para contadoria" name="[JEF] Junção no deslocamento para contadoria"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:idOrgaoOrigem', tramitacaoProcessualService.recuperaProcesso().orgaoJulgador.idOrgaoJulgador)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:idOrgaoColegiadoOrigem', tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorColegiado.idOrgaoJulgadorColegiado)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:idOrgaoJulgadorCargoOrigem', tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorCargo.idOrgaoJulgadorCargo)}"/>
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaVariavel('processo'),91,0,0)}"/>
            <action expression="#{preencherMovimento.deCodigo(123).comComplementoDeCodigo(18).doTipoDominio().preencherComElementoDeCodigo(40).comComplementoDeCodigo(7).doTipoLivre().preencherComTexto('Contadoria de Petrolina').lancarMovimento()}"/>
        </event>
    </node>
    <decision expression="#{tramitacaoProcessualService.recuperaProcesso().jurisdicao.estado.estado.equalsIgnoreCase('Rio Grande do Norte') ? 'Deslocar para contadoria do Rio Grande do Norte' : 'Junção no deslocamento para contadoria'}" name="[JEF] Processo do Rio Grande do Norte?">
        <transition to="[JEF] Deslocar para contadoria do Rio Grande do Norte" name="Deslocar para contadoria do Rio Grande do Norte"/>
        <transition to="[JEF] Junção no deslocamento para contadoria" name="Junção no deslocamento para contadoria"/>
    </decision>
    <node name="[JEF] Deslocar para contadoria do Rio Grande do Norte">
        <transition to="[JEF] Junção no deslocamento para contadoria" name="[JEF] Junção no deslocamento para contadoria"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:idOrgaoOrigem', tramitacaoProcessualService.recuperaProcesso().orgaoJulgador.idOrgaoJulgador)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:idOrgaoColegiadoOrigem', tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorColegiado.idOrgaoJulgadorColegiado)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:idOrgaoJulgadorCargoOrigem', tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorCargo.idOrgaoJulgadorCargo)}"/>
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaVariavel('processo'),94,0,0)}"/>
            <action expression="#{preencherMovimento.deCodigo(123).comComplementoDeCodigo(18).doTipoDominio().preencherComElementoDeCodigo(40).comComplementoDeCodigo(7).doTipoLivre().preencherComTexto('Contadoria do Rio Grande do Norte').lancarMovimento()}"/>
        </event>
    </node>
    <join name="[JEF] Junção no deslocamento para contadoria">
        <transition to="[JEF] Lançar movimento de recebimento dos autos" name="Lançar movimento de recebimento dos autos"/>
    </join>
    <node name="[JEF] Lançar movimento de recebimento dos autos">
        <transition to="[JEF] Incluir cálculo" name="Incluir cálculo"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(979).lancarMovimento()}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="[JEF] Incluir cálculo">
        <task name="[JEF] Incluir cálculo" swimlane="Servidores e estagiários" priority="3">
            <controller>
                <variable name="minutaEmElaboracao" mapped-name="textEditCombo:minutaEmElaboracao" access="read,write"/>
                <variable name="minutarEmLote" mapped-name="minutarLote:minutarEmLote" access="read"/>
                <variable name="movimentarEmLote" mapped-name="movimentarLote:movimentarEmLote" access="read"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - [JEF] Contadoria" name="Nó de Desvio - [JEF] Contadoria">
            <condition expression="#{true}"/>
        </transition>
        <transition to="[JEF] Assinar cálculo" name="Encaminhar para assinatura"/>
        <transition to="[JEF] Retornar para juízo de origem" name="Retornar para juízo de origem"/>
        <event type="task-create">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', 'true')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '57')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos','Retornar para juízo de origem')}"/>
        </event>
        <event type="node-leave">
            <action expression="#{not empty processoHome.idProcessoDocumento ? tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', processoHome.idProcessoDocumento) : ''}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="[JEF] Assinar cálculo">
        <task name="[JEF] Assinar cálculo" swimlane="Servidores e estagiários" priority="3">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="UsuarioMinuta" mapped-name="textAlert:UsuarioMinuta" access="read,write"/>
                <variable name="movimentarEmLote" mapped-name="movimentarLote:movimentarEmLote" access="read"/>
            </controller>
        </task>
        <description><![CDATA[Variável: UsuarioMinuta
Label: Usuário que preparou a minuta: #{tramitacaoProcessualService.recuperaVariavel('usuarioMinuta')}
Tipo: Aviso]]></description>
        <transition to="[JEF] Incluir cálculo" name="Devolver para minuta"/>
        <transition to="Nó de Desvio - [JEF] Contadoria" name="Nó de Desvio - [JEF] Contadoria">
            <condition expression="#{true}"/>
        </transition>
        <transition to="[JEF] Retornar para juízo de origem" name="Retornar para juízo de origem">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-start">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavel('usuarioMinuta', not empty processoDocumentoManager.findById(tramitacaoProcessualService.recuperaVariavel('minutaEmElaboracao')).getNomeUsuarioAlteracao() ? processoDocumentoManager.findById(tramitacaoProcessualService.recuperaVariavel('minutaEmElaboracao')).getNomeUsuarioAlteracao() : processoDocumentoManager.findById(tramitacaoProcessualService.recuperaVariavel('minutaEmElaboracao')).getNomeUsuarioInclusao())}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('Retornar para juízo de origem')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos','Retornar para juízo de origem')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '57')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', 'false')}"/>
        </event>
    </task-node>
    <node name="[JEF] Retornar para juízo de origem">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(tramitacaoProcessualService.recuperaVariavel('processo'), tramitacaoProcessualService.recuperaVariavel('pje:idOrgaoOrigem'), tramitacaoProcessualService.recuperaVariavel('pje:idOrgaoJulgadorCargoOrigem'), tramitacaoProcessualService.recuperaVariavel('pje:idOrgaoColegiadoOrigem'))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:idOrgaoOrigem')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:idOrgaoColegiadoOrigem')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:idOrgaoJulgadorCargoOrigem')}"/>
            <action expression="#{preencherMovimento.deCodigo(980).comComplementoDeCodigo(7).doTipoDinamico().preencherComObjeto(tramitacaoProcessualService.recuperaProcesso().orgaoJulgador).associarAoProcesso(tramitacaoProcessualService.recuperaProcesso()).lancarMovimento()}"/>
            <action expression="#{preencherMovimento.deCodigo(132).lancarMovimento()}"/>
            <action expression="#{processoJudicialService.sinalizarFluxo(tramitacaoProcessualService.recuperaProcesso(),'jef:aguardaContadoria',true,true,false)}"/>
        </event>
    </node>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - [JEF] Contadoria">
        <task name="Nó de Desvio - [JEF] Contadoria" swimlane="Servidores e estagiários" priority="3"/>
        <transition to="Término" name="Término"/>
        <transition to="[JEF] Incluir cálculo" name="Incluir cálculo"/>
        <transition to="[JEF] Assinar cálculo" name="Assinar Cálculo"/>
        <transition to="[JEF] Separação em deslocamento para contadoria" name="[JEF] Separação em deslocamento para contadoria"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
