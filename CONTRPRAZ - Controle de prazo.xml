<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="Controle de prazo">
    <description><![CDATA[Código: CONTRPRAZ

Este fluxo serve para controle dos prazos gerais, que são aqueles diferentes dos prazos para recurso, contrarrazões e obrigação de fazer.

Os expediente em controle nesse fluxo são salvos na variável "fluxo:idsExpedientes", que é recuperada nos demais fluxos para verificação de manifestação.]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="solicitante">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('9:1469,10:1338,9:5197,10:5483,9:5945')}"/>
    </swimlane>
    <swimlane name="Nó de Desvio - Controle de prazo"/>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" priority="3"/>
        <transition to="Existe expediente em controle?" name="Existe expediente em controle"/>
    </start-state>  
    <!-- NODES -->
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('fluxo:idsExpedientes').{idExp | processoParteExpedienteManager.findById(idExp.longValue()).fechado}.contains(false) ? 'Existem novos expedientes?' : 'Gravar novos expedientes'}" name="Existe expediente em controle?">
        <transition to="Existem novos expedientes?" name="Existem novos expedientes?"/>
        <transition to="Gravar novos expedientes" name="Gravar novos expedientes"/>
    </decision>
    <decision expression="#{entityManager.createNativeQuery(parametroUtil.getParametro('fluxo:selectExistsNovoExpedientePorTipoDiferente')).setParameter('idProcesso',tramitacaoProcessualService.recuperaVariavel('processo')).setParameter('idsTiposExpedientes',collectionUtilsPje.convertStringToLongList('-1')).setParameter('idsExpedientesEmControle',tramitacaoProcessualService.recuperaVariavel('fluxo:idsExpedientes')).getSingleResult() ? 'Atualizar lista de expedientes em controle' : 'Controle de prazo - Em curso'}" name="Existem novos expedientes?">
        <transition to="Atualizar lista de expedientes em controle" name="Atualizar lista de expedientes em controle"/>
        <transition to="Controle de prazo - Em curso" name="Controle de prazo - Em curso"/>
    </decision>
    <node name="Atualizar lista de expedientes em controle">
        <transition to="Controle de prazo - Em curso" name="Controle de prazo - Em curso"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('fluxo:idsExpedientes',entityManager.createNativeQuery(parametroUtil.getParametro('fluxo:selectExpedienteComplementarPorTipoDiferente')).setParameter('idProcesso',tramitacaoProcessualService.recuperaVariavel('processo')).setParameter('idsTiposExpedientes',collectionUtilsPje.convertStringToLongList('-1')).setParameter('idsExpedientesEmControle',tramitacaoProcessualService.recuperaVariavel('fluxo:idsExpedientes')).getResultList())}"/>
        </event>
    </node>
    <node name="Gravar novos expedientes">
        <transition to="Expedientes sem prazo?" name="Expedientes sem prazo?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('fluxo:idsExpedientes', collectionUtilsPje.getNewArrayList())}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('fluxo:idsExpedientes',entityManager.createNativeQuery(parametroUtil.getParametro('fluxo:selectExpedienteAbertoPorTipoDiferente')).setParameter('idProcesso',tramitacaoProcessualService.recuperaVariavel('processo')).setParameter('idsTiposExpedientes',collectionUtilsPje.convertStringToLongList('-1')).getResultList())}"/>
        </event>
    </node>
    <decision expression="#{empty tramitacaoProcessualService.recuperaVariavel('fluxo:idsExpedientes') ? 'Controle de prazo - Sem prazo' : 'Controle de prazo - Em curso'}" name="Expedientes sem prazo?">
        <transition to="Controle de prazo - Em curso" name="Controle de prazo - Em curso"/>
        <transition to="Controle de prazo - Sem prazo" name="Controle de prazo - Sem prazo"/>
    </decision>
    <task-node end-tasks="true" name="Controle de prazo - Sem prazo">
        <task name="Controle de prazo - Sem prazo" swimlane="solicitante" priority="3">
            <controller>
                <variable name="atencao" mapped-name="textMessage:atencao" access="read,write"/>
                <variable name="WEB-INF_xhtml_flx_exped_registroCiencia" mapped-name="frame:WEB-INF_xhtml_flx_exped_registroCiencia" access="read,write"/>
                <variable name="info" mapped-name="textMessage:info" access="read,write"/>
                <variable name="WEB-INF_xhtml_flx_exped_encerrarExpedienteManual" mapped-name="frame:WEB-INF_xhtml_flx_exped_encerrarExpedienteManual" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[Variável: atencao
Label: Não há prazo a ser controlado
Tipo: Aviso Customizado

Variável: info
Label: Caso deseje encerrar os prazos antecipadamente, selecione uma mais expedientes abaixo e clique no botão "ENCERRAR EXPEDIENTES SELECIONADOS".
Tipo: Aviso Customizado]]></description>
        <transition to="Nó de Desvio - Controle de prazo" name="Nó de Desvio - Controle de prazo">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Incluir no fluxo de análise da secretaria" name="Encaminhar para análise da secretaria"/>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setVariable('pje:fluxo:registrociencia:meios','E,C,M,T,S,G')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="Controle de prazo - Em curso">
        <task name="Controle de prazo - Em curso" swimlane="solicitante" priority="3">
            <controller>
                <variable name="atencao" mapped-name="textMessage:atencao" access="read,write"/>
                <variable name="WEB-INF_xhtml_flx_exped_registroCiencia" mapped-name="frame:WEB-INF_xhtml_flx_exped_registroCiencia" access="read,write"/>
                <variable name="info" mapped-name="textMessage:info" access="read,write"/>
                <variable name="WEB-INF_xhtml_flx_exped_encerrarExpedienteManual" mapped-name="frame:WEB-INF_xhtml_flx_exped_encerrarExpedienteManual" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[Variável: atencao
Label: O processo será movimentado automaticamente após o decurso de todos os prazos ou quando todas as partes se manifestarem.
Tipo: Aviso Customizado

Variável: info
Label: Caso deseje encerrar os prazos antecipadamente, selecione um ou mais expedientes abaixo e clique no botão "ENCERRAR EXPEDIENTES SELECIONADOS".
Tipo: Aviso Customizado]]></description>
        <transition to="Expediente aberto?" name="Expediente aberto?">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Incluir no fluxo de análise da secretaria" name="Encaminhar para análise da secretaria"/>
        <transition to="Nó de Desvio - Controle de prazo" name="Nó de Desvio - Controle de prazo">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('Expediente aberto?')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavel('pje:aguardaPeticao',true)}"/>
            <action name="upd" expression="#{taskInstanceUtil.setVariable('pje:fluxo:registrociencia:meios','E,C,M,T,S,G')}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:aguardaPeticao')}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('fluxo:idsExpedientes').{idExp | processoParteExpedienteManager.findById(idExp.longValue()).fechado}.contains(false) ? 'Controle de prazo - Em curso' : 'Incluir no fluxo de análise de manifestação'}" name="Expediente aberto?">
        <transition to="Controle de prazo - Em curso" name="Controle de prazo - Em curso"/>
        <transition to="Incluir no fluxo de análise de manifestação" name="Incluir no fluxo de análise de manifestação"/>
    </decision>
    <node name="Incluir no fluxo de análise de manifestação">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{processoJudicialService.incluirNovoFluxo(tramitacaoProcessualService.recuperaProcesso(), 'ANMAN', processInstanceUtil.getVariables())}"/>
        </event>
    </node>
    <node name="Incluir no fluxo de análise da secretaria">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{processoJudicialService.incluirNovoFluxo(tramitacaoProcessualService.recuperaProcesso(), 'ANSEC', processInstanceUtil.getVariables())}"/>
        </event>
    </node>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - Controle de prazo">
        <task name="Nó de Desvio - Controle de prazo" swimlane="Nó de Desvio - Controle de prazo" priority="3"/>
        <transition to="Término" name="Término"/>
        <transition to="Controle de prazo - Em curso" name="Controle de prazo - Em curso"/>
        <transition to="Controle de prazo - Sem prazo" name="Controle de prazo - Sem prazo"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
