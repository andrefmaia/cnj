<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="Análise de secretaria">
    <description><![CDATA[Código: ANSEC]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - Análise de secretaria"/>
    <swimlane name="solicitante">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('9:1469,10:1338,9:5197,10:5483,9:5945,4738:1')}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="solicitante" priority="3"/>
        <transition to="Secretaria - Analisar" name="Secretaria - Analisar"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="Secretaria - Analisar">
        <task name="Secretaria - Analisar" swimlane="solicitante" priority="3">
            <controller>
                <variable name="ultimoAtoProferido" mapped-name="visualizarUltimoAto:ultimoAtoProferido" access="read,write"/>
                <variable name="movimentarEmLote" mapped-name="movimentarLote:movimentarEmLote" access="read,write"/>
            </controller>
        </task>
        <transition to="Incluir no fluxo de operação de audiência" name="Aguardar audiência">
            <condition expression="#{not empty processoJudicialManager.getAudienciaDesignadaMaisAntiga(tramitacaoProcessualService.recuperaProcesso())}"/>
        </transition>
        <transition to="Incluir no fluxo de operação de perícia" name="Aguardar perícia">
            <condition expression="#{entityManager.createNativeQuery(&quot;SELECT COUNT(*) FROM tb_processo_pericia WHERE cd_status_pericia = 'M' AND id_processo_trf = :idProcesso&quot;).setParameter('idProcesso', tramitacaoProcessualService.recuperaVariavel('processo')).getSingleResult() &gt; 0}"/>
        </transition>
        <transition to="Incluir no fluxo de arquivamento" name="Arquivar"/>
        <transition to="Incluir no fluxo de certificação de trânsito em julgado" name="Certificar trânsito em julgado"/>
        <transition to="Incluir no fluxo de elaboração de decisão" name="Conclusão para decisão"/>
        <transition to="Incluir no fluxo de elaboração de decisão urgente" name="Conclusão para decisão urgente"/>
        <transition to="Incluir no fluxo de elaboração de despacho" name="Conclusão para despacho"/>
        <transition to="Incluir no fluxo de elaboração de sentença" name="Conclusão para julgamento"/>
        <transition to="Incluir no fluxo de controle de prazo" name="Controlar prazo">
            <condition expression="#{not empty entityManager.createNativeQuery(parametroUtil.getParametro('fluxo:selectExpedienteAbertoPorTipoDiferente')).setParameter('idProcesso',tramitacaoProcessualService.recuperaVariavel('processo')).setParameter('idsTiposExpedientes',collectionUtilsPje.convertStringToLongList('-1')).getResultList()}"/>
        </transition>
        <transition to="Incluir no fluxo de operação de audiência" name="Designar audiência">
            <condition expression="#{empty processoJudicialManager.getAudienciaDesignadaMaisAntiga(tramitacaoProcessualService.recuperaProcesso())}"/>
        </transition>
        <transition to="Incluir no fluxo de operação de perícia" name="Designar perícia">
            <condition expression="#{entityManager.createNativeQuery(&quot;SELECT COUNT(*) FROM tb_processo_pericia WHERE cd_status_pericia = 'M' AND id_processo_trf = :idProcesso&quot;).setParameter('idProcesso', tramitacaoProcessualService.recuperaVariavel('processo')).getSingleResult() == 0}"/>
        </transition>
        <transition to="Incluir no fluxo de elaboração de comunicação" name="Elaborar comunicação"/>
        <transition to="Incluir no fluxo de elaboração de cálculo" name="Elaborar cálculo"/>
        <transition to="Incluir no fluxo de elaboração de outros documentos" name="Elaborar outros documentos"/>
        <transition to="Incluir no fluxo de análise de secretaria do JEF" name="Encaminhar para análise de secretaria do JEF">
            <condition expression="#{collectionUtilsPje.convertStringToIntegerList(parametroUtil.getParametro('jef:fluxo:competencias')).contains(tramitacaoProcessualService.recuperaProcesso().getCompetencia().idCompetencia)}"/>
        </transition>
        <transition to="Incluir no fluxo da conciliação" name="Encaminhar para conciliação">
            <condition expression="#{!tramitacaoProcessualService.recuperaProcesso().jurisdicao.estado.estado.equalsIgnoreCase('Alagoas') and !tramitacaoProcessualService.recuperaProcesso().jurisdicao.estado.estado.equalsIgnoreCase('Rio Grande do Norte') and (!tramitacaoProcessualService.recuperaProcesso().jurisdicao.estado.estado.equalsIgnoreCase('Paraíba') or tramitacaoProcessualService.recuperaProcesso().jurisdicao.numeroOrigem == 8201) and (!tramitacaoProcessualService.recuperaProcesso().jurisdicao.estado.estado.equalsIgnoreCase('Pernambuco') or tramitacaoProcessualService.recuperaProcesso().jurisdicao.numeroOrigem == 8300 or tramitacaoProcessualService.recuperaProcesso().jurisdicao.numeroOrigem == 8302 or tramitacaoProcessualService.recuperaProcesso().jurisdicao.numeroOrigem == 8308)}"/>
        </transition>
        <transition to="Incluir processo no fluxo" name="Incluir processo no fluxo">
            <condition expression="#{authenticator.getUsuarioLogado().getIdUsuario() == 5}"/>
        </transition>
        <transition to="Nó de Desvio - Análise de secretaria" name="Nó de Desvio - Análise de secretaria">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Incluir no fluxo de redistribuição" name="Redistribuir"/>
        <transition to="Incluir no fluxo de sobrestamento" name="Sobrestar"/>
        <transition to="Dispara fluxo - teste vini" name="Dispara fluxo - teste vini"/>
    </task-node>
    <node name="Incluir no fluxo de elaboração de despacho">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('lancarConclusao', true)}"/>
            <action expression="#{processoJudicialService.incluirNovoFluxo(tramitacaoProcessualService.recuperaProcesso(), 'ELDESP', processInstanceUtil.getVariables())}"/>
        </event>
    </node>
    <node name="Incluir no fluxo de elaboração de decisão">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('lancarConclusao', true)}"/>
            <action expression="#{processoJudicialService.incluirNovoFluxo(tramitacaoProcessualService.recuperaProcesso(), 'ELDEC', processInstanceUtil.getVariables())}"/>
        </event>
    </node>
    <node name="Incluir no fluxo de elaboração de decisão urgente">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('lancarConclusao', true)}"/>
            <action expression="#{processoJudicialService.incluirNovoFluxo(tramitacaoProcessualService.recuperaProcesso(), 'ELDECURG', processInstanceUtil.getVariables())}"/>
        </event>
    </node>
    <node name="Incluir no fluxo de elaboração de sentença">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('lancarConclusao', true)}"/>
            <action expression="#{processoJudicialService.incluirNovoFluxo(tramitacaoProcessualService.recuperaProcesso(), 'ELSENT', processInstanceUtil.getVariables())}"/>
        </event>
    </node>
    <node name="Incluir no fluxo de elaboração de comunicação">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{processoJudicialService.incluirNovoFluxo(tramitacaoProcessualService.recuperaProcesso(), 'ELCOM', processInstanceUtil.getVariables())}"/>
        </event>
    </node>
    <node name="Incluir no fluxo de elaboração de outros documentos">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{processoJudicialService.incluirNovoFluxo(tramitacaoProcessualService.recuperaProcesso(), 'ELOUTRDOC', processInstanceUtil.getVariables())}"/>
        </event>
    </node>
    <node name="Incluir no fluxo de redistribuição">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{processoJudicialService.incluirNovoFluxo(tramitacaoProcessualService.recuperaProcesso(), 'RED2', processInstanceUtil.getVariables())}"/>
        </event>
    </node>
    <node name="Incluir no fluxo de controle de prazo">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{processoJudicialService.incluirNovoFluxo(tramitacaoProcessualService.recuperaProcesso(), 'CONTRPRAZ', processInstanceUtil.getVariables())}"/>
        </event>
    </node>
    <node name="Incluir no fluxo de certificação de trânsito em julgado">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{processoJudicialService.incluirNovoFluxo(tramitacaoProcessualService.recuperaProcesso(), 'CERTTRANSJULG', processInstanceUtil.getVariables())}"/>
        </event>
    </node>
    <node name="Incluir no fluxo de operação de audiência">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{processoJudicialService.incluirNovoFluxo(tramitacaoProcessualService.recuperaProcesso(), 'OPAUD', processInstanceUtil.getVariables())}"/>
        </event>
    </node>
    <node name="Incluir no fluxo de operação de perícia">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{processoJudicialService.incluirNovoFluxo(tramitacaoProcessualService.recuperaProcesso(), 'OPPER', processInstanceUtil.getVariables())}"/>
        </event>
    </node>
    <node name="Incluir no fluxo de arquivamento">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{processoJudicialService.incluirNovoFluxo(tramitacaoProcessualService.recuperaProcesso(), 'ARQ2', processInstanceUtil.getVariables())}"/>
        </event>
    </node>
    <node name="Incluir no fluxo de elaboração de cálculo">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{processoJudicialService.incluirNovoFluxo(tramitacaoProcessualService.recuperaProcesso(), 'ELCALC', processInstanceUtil.getVariables())}"/>
        </event>
    </node>
    <node name="Incluir no fluxo da conciliação">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('novoFluxo', 'DEVCONC')}"/>
            <action expression="#{processoJudicialService.incluirNovoFluxo(tramitacaoProcessualService.recuperaProcesso(), 'CONC', processInstanceUtil.getVariables())}"/>
        </event>
    </node>
    <node name="Incluir no fluxo de sobrestamento">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{processoJudicialService.incluirNovoFluxo(tramitacaoProcessualService.recuperaProcesso(), 'SOBR', processInstanceUtil.getVariables())}"/>
        </event>
    </node>
    <node name="Incluir processo no fluxo">
        <transition to="Secretaria - Analisar" name="Secretaria - Analisar"/>
        <event type="node-enter">
            <action expression="#{processoJudicialService.incluirNovoFluxo(processoJudicialService.findById(166766),'ANSEC')}"/>
        </event>
    </node>
    <node name="Incluir no fluxo de análise de secretaria do JEF">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{processoJudicialService.incluirNovoFluxo(tramitacaoProcessualService.recuperaProcesso(), 'JEF_ANSECR', processInstanceUtil.getVariables())}"/>
        </event>
    </node>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - Análise de secretaria">
        <task name="Nó de Desvio - Análise de secretaria" swimlane="Nó de Desvio - Análise de secretaria" priority="3"/>
        <transition to="Término" name="Término"/>
        <transition to="Secretaria - Analisar" name="Secretaria - Analisar"/>
    </task-node>
    <node name="Dispara fluxo - teste vini">
        <transition to="Término" name="Término"/>
        <event type="node-leave">
            <action expression="#{processoJudicialService.incluirNovoFluxo(tramitacaoProcessualService.recuperaProcesso(), 'JFCE_VINIBELO_01', processInstance.contextInstance.variables)}"/>
        </event>
    </node>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event> 
</process-definition>
